// frontend/package.json
{
  "name": "rag-document-qa-frontend",
  "version": "1.0.0",
  "description": "Frontend for RAG Document Q&A System",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^14.5.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:8000"
}

// frontend/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './styles/main.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// frontend/public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="RAG Document Q&A System - Upload documents and ask questions using advanced AI" />
    <title>AI Document Q&A System</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

// frontend/Dockerfile
FROM node:18-alpine as build

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build the app
RUN npm run build

# Production stage with nginx
FROM nginx:alpine

# Copy build files
COPY --from=build /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# frontend/nginx.conf
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Handle React Router
    location / {
        try_files $uri $uri/ /index.html;
    }

    # API proxy to backend
    location /api/ {
        proxy_pass http://backend:8000/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Handle file uploads
        client_max_body_size 50M;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
}

# frontend/.env.example
REACT_APP_API_URL=http://localhost:8000/api/v1
REACT_APP_APP_NAME=RAG Document Q&A System
GENERATE_SOURCEMAP=false

# azure/arm-templates/main.json
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "appName": {
            "type": "string",
            "defaultValue": "rag-document-qa",
            "metadata": {
                "description": "Name of the application"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources"
            }
        },
        "containerImageTag": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "Container image tag"
            }
        }
    },
    "variables": {
        "containerRegistryName": "[concat(parameters('appName'), 'acr', uniqueString(resourceGroup().id))]",
        "containerAppEnvironmentName": "[concat(parameters('appName'), '-env')]",
        "backendAppName": "[concat(parameters('appName'), '-backend')]",
        "frontendAppName": "[concat(parameters('appName'), '-frontend')]",
        "storageAccountName": "[concat(replace(parameters('appName'), '-', ''), 'storage', uniqueString(resourceGroup().id))]",
        "logAnalyticsWorkspaceName": "[concat(parameters('appName'), '-logs')]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2023-01-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "accessTier": "Hot",
                "allowBlobPublicAccess": true
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2023-01-01",
            "name": "[concat(variables('storageAccountName'), '/default/rag-documents')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2023-07-01",
            "name": "[variables('containerRegistryName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Basic"
            },
            "properties": {
                "adminUserEnabled": true
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2022-10-01",
            "name": "[variables('logAnalyticsWorkspaceName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                }
            }
        },
        {
            "type": "Microsoft.App/managedEnvironments",
            "apiVersion": "2023-05-01",
            "name": "[variables('containerAppEnvironmentName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "appLogsConfiguration": {
                    "destination": "log-analytics",
                    "logAnalyticsConfiguration": {
                        "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))).customerId]",
                        "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName')), '2022-10-01').primarySharedKey]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.App/containerApps",
            "apiVersion": "2023-05-01",
            "name": "[variables('backendAppName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvironmentName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvironmentName'))]",
                "configuration": {
                    "ingress": {
                        "external": true,
                        "targetPort": 8000,
                        "allowInsecure": false
                    },
                    "registries": [
                        {
                            "server": "[concat(variables('containerRegistryName'), '.azurecr.io')]",
                            "username": "[variables('containerRegistryName')]",
                            "passwordSecretRef": "registry-password"
                        }
                    ],
                    "secrets": [
                        {
                            "name": "registry-password",
                            "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2023-07-01').passwords[0].value]"
                        },
                        {
                            "name": "storage-connection-string",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01').keys[0].value)]"
                        }
                    ]
                },
                "template": {
                    "containers": [
                        {
                            "name": "backend",
                            "image": "[concat(variables('containerRegistryName'), '.azurecr.io/rag-backend:', parameters('containerImageTag'))]",
                            "env": [
                                {
                                    "name": "AZURE_STORAGE_CONNECTION_STRING",
                                    "secretRef": "storage-connection-string"
                                },
                                {
                                    "name": "AZURE_CONTAINER_NAME",
                                    "value": "rag-documents"
                                }
                            ],
                            "resources": {
                                "cpu": 1.0,
                                "memory": "2Gi"
                            }
                        }
                    ],
                    "scale": {
                        "minReplicas": 1,
                        "maxReplicas": 3
                    }
                }
            }
        },
        {
            "type": "Microsoft.App/containerApps",
            "apiVersion": "2023-05-01",
            "name": "[variables('frontendAppName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvironmentName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
                "[resourceId('Microsoft.App/containerApps', variables('backendAppName'))]"
            ],
            "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvironmentName'))]",
                "configuration": {
                    "ingress": {
                        "external": true,
                        "targetPort": 80,
                        "allowInsecure": false
                    },
                    "registries": [
                        {
                            "server": "[concat(variables('containerRegistryName'), '.azurecr.io')]",
                            "username": "[variables('containerRegistryName')]",
                            "passwordSecretRef": "registry-password"
                        }
                    ],
                    "secrets": [
                        {
                            "name": "registry-password",
                            "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2023-07-01').passwords[0].value]"
                        }
                    ]
                },
                "template": {
                    "containers": [
                        {
                            "name": "frontend",
                            "image": "[concat(variables('containerRegistryName'), '.azurecr.io/rag-frontend:', parameters('containerImageTag'))]",
                            "env": [
                                {
                                    "name": "REACT_APP_API_URL",
                                    "value": "[concat('https://', reference(resourceId('Microsoft.App/containerApps', variables('backendAppName'))).configuration.ingress.fqdn, '/api/v1')]"
                                }
                            ],
                            "resources": {
                                "cpu": 0.5,
                                "memory": "1Gi"
                            }
                        }
                    ],
                    "scale": {
                        "minReplicas": 1,
                        "maxReplicas": 3
                    }
                }
            }
        }
    ],
    "outputs": {
        "frontendUrl": {
            "type": "string",
            "value": "[concat('https://', reference(resourceId('Microsoft.App/containerApps', variables('frontendAppName'))).configuration.ingress.fqdn)]"
        },
        "backendUrl": {
            "type": "string",
            "value": "[concat('https://', reference(resourceId('Microsoft.App/containerApps', variables('backendAppName'))).configuration.ingress.fqdn)]"
        },
        "containerRegistryName": {
            "type": "string",
            "value": "[variables('containerRegistryName')]"
        },
        "storageAccountName": {
            "type": "string",
            "value": "[variables('storageAccountName')]"
        }
    }
}

# azure/docker-compose.azure.yml
version: '3.8'

services:
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    environment:
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING}
      - AZURE_CONTAINER_NAME=rag-documents
      - ALLOWED_ORIGINS=https://your-frontend-domain.azurecontainerapps.io,http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - ../storage:/app/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=https://your-backend-domain.azurecontainerapps.io/api/v1
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
